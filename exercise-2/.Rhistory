words <- c("uncertainty", "discreet", "civilization", "finish", "summary", "mail")
# Create a vector `words.of.the.day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (single or double) (e.g., `"data" is the
# word of the day!`)
words.of.the.day <- paste("&"", words, "&"", "is the word of the day")
# Create a vector `a.f.words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
# Create a vector `g.m.words` which are the elements in `words` that start with
# "g" through "m"
# Define a function `WordBin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
# Use your `WordBin` function to determine which of your words start with "e"
# through "q"
# Exercise 5: vector practice
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("uncertainty", "discreet", "civilization", "finish", "summary", "mail")
# Create a vector `words.of.the.day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (single or double) (e.g., `"data" is the
# word of the day!`)
words.of.the.day <- paste("\"", words, "\"", "is the word of the day")
# Create a vector `a.f.words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
# Create a vector `g.m.words` which are the elements in `words` that start with
# "g" through "m"
# Define a function `WordBin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
# Use your `WordBin` function to determine which of your words start with "e"
# through "q"
print(words.of.the.day)
# Exercise 5: vector practice
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("uncertainty", "discreet", "civilization", "finish", "summary", "mail")
# Create a vector `words.of.the.day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (single or double) (e.g., `"data" is the
# word of the day!`)
words.of.the.day <- paste(words, "is the word of the day")
# Create a vector `a.f.words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a.f.words <- words[words < f]
# Create a vector `g.m.words` which are the elements in `words` that start with
# "g" through "m"
# Define a function `WordBin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
# Use your `WordBin` function to determine which of your words start with "e"
# through "q"
a.f.words <- words[words < 'f']
a.f.words <- words[words < 'g']
a.f.words <- words[words < 'f']
a.f.words <- words[words < 'g']
g.m.words <- words[words < n && words > f]
g.m.words <- words[words < 'n' && words > 'f']
g.m.words <- words[words < 'n']
g.m.words <- words[words < 'n' & words > 'f']
g.m.words <- words[words < 'n' & words > 'g']
# those letters alphabetically.
WordBin <- function(words, letter1, letter2) {
if (letter1 < letter2) {
result <- words[words > letter1 & words < letter2]
} else {
result <- words[words < letter1 & words > letter2]
}
return(result)
}
e.q.words <- WordBin(words, 'e', 'q')
e.q.words <- WordBin(words, 'q', 'e')
# Exercise 5: vector practice
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("uncertainty", "discreet", "civilization", "finish", "summary", "mail")
# Create a vector `words.of.the.day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (single or double) (e.g., `"data" is the
# word of the day!`)
words.of.the.day <- paste(words, "is the word of the day")
# Create a vector `a.f.words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a.f.words <- words[words < 'g']
# Create a vector `g.m.words` which are the elements in `words` that start with
# "g" through "m"
g.m.words <- words[words < 'n' & words > 'g']
# Define a function `WordBin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
WordBin <- function(words, letter1, letter2) {
if (letter1 < letter2) {
result <- words[words > letter1 & words < letter2]
} else {
result <- words[words < letter1 & words > letter2]
}
return(result)
}
# Use your `WordBin` function to determine which of your words start with "e"
# through "q"
e.q.words <- WordBin(words, 'e', 'q')
# Exercise 5: vector practice
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("uncertainty", "discreet", "civilization", "finish", "summary", "mail")
# Create a vector `words.of.the.day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (single or double) (e.g., `"data" is the
# word of the day!`)
words.of.the.day <- paste(words, "is the word of the day")
# Create a vector `a.f.words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a.f.words <- words[words <= 'f']
# Create a vector `g.m.words` which are the elements in `words` that start with
# "g" through "m"
g.m.words <- words[words <= 'm' & words >= 'g']
# Define a function `WordBin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
WordBin <- function(words, letter1, letter2) {
if (letter1 < letter2) {
result <- words[words > letter1 & words < letter2]
} else {
result <- words[words < letter1 & words > letter2]
}
return(result)
}
# Use your `WordBin` function to determine which of your words start with "e"
# through "q"
e.q.words <- WordBin(words, 'e', 'q')
g.m.words <- words[words < 'n' & words >= 'g']
g.m.words <- words[words >= 'g' & words < 'n']
g.m.words <- words[words >= 'g' & words <= 'm']
g.m.words <- words[words >= 'g' & words < 'n']
# Exercise 5: vector practice
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("uncertainty", "discreet", "civilization", "finish", "summary", "mail")
# Create a vector `words.of.the.day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (single or double) (e.g., `"data" is the
# word of the day!`)
words.of.the.day <- paste(words, "is the word of the day")
# Create a vector `a.f.words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a.f.words <- words[words <= 'f']
# Create a vector `g.m.words` which are the elements in `words` that start with
# "g" through "m"
g.m.words <- words[words >= 'g' & words < 'n']
# Define a function `WordBin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
WordBin <- function(words, letter1, letter2) {
if (letter1 < letter2) {
result <- words[words > letter1 & words < letter2]
} else {
result <- words[words < letter1 & words > letter2]
}
return(result)
}
# Use your `WordBin` function to determine which of your words start with "e"
# through "q"
e.q.words <- WordBin(words, 'e', 'q')
# Exercise 5: vector practice
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("uncertainty", "discreet", "civilization", "finish", "summary", "mail")
# Create a vector `words.of.the.day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (single or double) (e.g., `"data" is the
# word of the day!`)
words.of.the.day <- paste(words, "is the word of the day")
# Create a vector `a.f.words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a.f.words <- words[words <= 'f']
# Create a vector `g.m.words` which are the elements in `words` that start with
# "g" through "m"
g.m.words <- words[words >= 'g' & words <= 'm']
# Define a function `WordBin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
WordBin <- function(words, letter1, letter2) {
if (letter1 < letter2) {
result <- words[words > letter1 & words < letter2]
} else {
result <- words[words < letter1 & words > letter2]
}
return(result)
}
# Use your `WordBin` function to determine which of your words start with "e"
# through "q"
e.q.words <- WordBin(words, 'e', 'q')
g.m.words <- words[words >= 'g' & words < 'n']
words.of.the.day <- paste0("\"", words, "\"", "is the word of the day")
words.of.the.day <- cat("\"", words, "\"", "is the word of the day")
# Exercise 5: vector practice
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("uncertainty", "discreet", "civilization", "finish", "summary", "mail")
# Create a vector `words.of.the.day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (single or double) (e.g., `"data" is the
# word of the day!`)
words.of.the.day <- paster(words, "is the word of the day")
# Create a vector `a.f.words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a.f.words <- words[words <= 'f']
# Create a vector `g.m.words` which are the elements in `words` that start with
# "g" through "m"
g.m.words <- words[words >= 'g' & words < 'n']
# Define a function `WordBin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
WordBin <- function(words, letter1, letter2) {
if (letter1 < letter2) {
result <- words[words > letter1 & words < letter2]
} else {
result <- words[words < letter1 & words > letter2]
}
return(result)
}
# Use your `WordBin` function to determine which of your words start with "e"
# through "q"
e.q.words <- WordBin(words, 'e', 'q')
# Exercise 5: vector practice
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("uncertainty", "discreet", "civilization", "finish", "summary", "mail")
# Create a vector `words.of.the.day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (single or double) (e.g., `"data" is the
# word of the day!`)
words.of.the.day <- paster(words, "is the word of the day")
# Create a vector `a.f.words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a.f.words <- words[words <= 'f']
# Create a vector `g.m.words` which are the elements in `words` that start with
# "g" through "m"
g.m.words <- words[words >= 'g' & words < 'n']
# Define a function `WordBin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
WordBin <- function(words, letter1, letter2) {
if (letter1 < letter2) {
result <- words[words > letter1 & words < letter2]
} else {
result <- words[words < letter1 & words > letter2]
}
return(result)
}
# Use your `WordBin` function to determine which of your words start with "e"
# through "q"
e.q.words <- WordBin(words, 'e', 'q')
# Exercise 5: vector practice
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("uncertainty", "discreet", "civilization", "finish", "summary", "mail")
# Create a vector `words.of.the.day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (single or double) (e.g., `"data" is the
# word of the day!`)
words.of.the.day <- paste(words, "is the word of the day")
# Create a vector `a.f.words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a.f.words <- words[words <= 'f']
# Create a vector `g.m.words` which are the elements in `words` that start with
# "g" through "m"
g.m.words <- words[words >= 'g' & words < 'n']
# Define a function `WordBin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
WordBin <- function(words, letter1, letter2) {
if (letter1 < letter2) {
result <- words[words > letter1 & words < letter2]
} else {
result <- words[words < letter1 & words > letter2]
}
return(result)
}
# Use your `WordBin` function to determine which of your words start with "e"
# through "q"
e.q.words <- WordBin(words, 'e', 'q')
setwd("~/Desktop/INFO 201/Practices/ch8-lists/exercise-1")
meals$dinner <- "mao cai"
# Exercise 1: creating and accessing lists
# Create a vector `my.breakfast` of everything you ate for breakfast
my.breakfast <- c("pancakes", "scrambled egg")
# Create a vector `my.lunch` of everything you ate (or will eat) for lunch
my.lunch <- c("ceaser salad")
# Create a list "meals" that has contains your breakfast and lunch
meals <- list(breakfast = my.breakfast, lunch = my.lunch)
# Add a "dinner" element to your "meals" list that has what you plan to eat
# for dinner
meals$dinner <- "mao cai"
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early.meals`
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `AddPizza` that adds pizza to a given `meal` vector
# Create a vector `bette.meals` that is all your meals, but with pizza!
dinner <- meals$dinner
meals[[5]] <- meals[["lunch"]]
early.meals <- meals[breakfast, lunch]
early.meals <- meals[breakfast & lunch]
early.meals <- meals[breakfast]
early.meals <- meals[breakfast]
# Exercise 1: creating and accessing lists
# Create a vector `my.breakfast` of everything you ate for breakfast
my.breakfast <- c("pancakes", "scrambled egg")
# Create a vector `my.lunch` of everything you ate (or will eat) for lunch
my.lunch <- c("ceaser salad")
# Create a list "meals" that has contains your breakfast and lunch
meals <- list(breakfast = my.breakfast, lunch = my.lunch)
# Add a "dinner" element to your "meals" list that has what you plan to eat
# for dinner
meals$dinner <- "mao cai"
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early.meals`
early.meals <- meals[breakfast]
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `AddPizza` that adds pizza to a given `meal` vector
# Create a vector `bette.meals` that is all your meals, but with pizza!
early.meals <- meals["breakfast"]
early.meals <- list(meals["breakfast"], meals["lunch"])
name <- c('Ada','Bob','Chris','Diya','Emma')
# Vector of heights
height <- 58:62
# Vector of weights
weight <- c(115, 117, 120, 123, 126)
# Combine the vectors into a data.frame
# Note the names of the variables become the names of the columns!
my.data <- data.frame(name, height, weight, stringsAsFactors=FALSE)
name <- c('Ada','Bob','Chris','Diya','Emma')
# Vector of heights
height <- 58:62
# Vector of weights
weight <- c(115, 117, 120, 123, 126)
# Combine the vectors into a data.frame
# Note the names of the variables become the names of the columns!
my.data <- data.frame(name, height, weight, stringsAsFactors=FALSE)
my.data['Ada', ]
my.data[1, ]
setwd("~/Desktop/INFO 201/Practices/ch9-data-frames/exercise-2")
employees <- c(paste(Employee, 1:100))
employees <- c(paste("Employee", 1:100))
employees
employees <- c(paste("Employee", 1:100))
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling
employees <- c(paste("Employee", 1:100))
# Create a vector of 100 random salaries for the year 2016
# Use the `runif()` function to pick random numbers between 40000 and 50000
# Create a vector of 100 salaries in 2017 that have changed from 2016
# Use `runif()` to add a random number between -5000 and 10000 to each of 2016's
# salaries (the negative number means that a salary may have decreased!)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
# Create a column 'change' that stores each person's change in salary between
# 2016 and 2017
# Create a column 'got.raise' that is TRUE if the person got a raise (their
# salary went up)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2017 salary of employee 57
# How many employees got a raise?
# What was the dollar value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
salaries <- runif(100, 40000, 50000)
salaries.2017 <- salraies.2016 + runif(100, 5000, 10000)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling
employees <- c(paste("Employee", 1:100))
# Create a vector of 100 random salaries for the year 2016
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries.2016 <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2017 that have changed from 2016
# Use `runif()` to add a random number between -5000 and 10000 to each of 2016's
# salaries (the negative number means that a salary may have decreased!)
salaries.2017 <- salraies.2016 + runif(100, 5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
# Create a column 'change' that stores each person's change in salary between
# 2016 and 2017
# Create a column 'got.raise' that is TRUE if the person got a raise (their
# salary went up)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2017 salary of employee 57
# How many employees got a raise?
# What was the dollar value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
salaries.2017 <- salraies.2016 + runif(100, 5000, 10000)
salaries.2017 <- salaries.2016 + runif(100, 5000, 10000)
salaries.2017 <- salaries.2016 + runif(100, -5000, 10000)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling
employees <- c(paste("Employee", 1:100))
# Create a vector of 100 random salaries for the year 2016
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries.2016 <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2017 that have changed from 2016
# Use `runif()` to add a random number between -5000 and 10000 to each of 2016's
# salaries (the negative number means that a salary may have decreased!)
salaries.2017 <- salaries.2016 + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
# Create a column 'change' that stores each person's change in salary between
# 2016 and 2017
# Create a column 'got.raise' that is TRUE if the person got a raise (their
# salary went up)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2017 salary of employee 57
# How many employees got a raise?
# What was the dollar value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
salaries <- data.frame(employees, salaries.2016, salaries.2017, stringsAsFactors = FALSE)
stringsAsFactors
salaries$change <- salaries$salaries.2017 - salaries$salaries.2016
salaries$got.raise <- salaries[salaries$change > 0]
salaries$got.raise <- salaries$change > 0
salaries[57, "salaries.2017"]
length(, got.raise = TRUE)
salaries[, got.raise = TRUE]
salaries[, got.raise == TRUE]
salaries[, salaries$got.raise == TRUE]
salaries[, got.raise[TRUE]]
salaries$got.raise[TRUE]
salaries$got.raise['TRUE']
salaries$got.raise == TRUE
salaries$got.raise
salaries$got.raise[TRUE]
salaries$got.raise[salaries$got.raise == TRUE]
got.raise.ppl <- salaries$got.raise[salaries$got.raise == TRUE]
length(got.raise.ppl)
max(salaries$got.raise)
max(salaries$change)
salaries[max(salaries$change), ]
salaries[salaries$change == max(salaries$change), ]
salaries[salaries$change == max(salaries$change), employee]
salaries[salaries$change == max(salaries$change), ]
